# Kickstart file automatically generated by anaconda.

install
nfs --server=192.170.0.1 --dir=/linuxinstall/macaddr
lang en_US.UTF-8
keyboard us
text
rootpw  ossdbg1
firewall --disabled 
authconfig --enableshadow --enablemd5
selinux --disabled
timezone --utc Asia/Shanghai
logging --host=192.170.0.1 --port=514 --level=debug

%include /tmp/part-include
zerombr
#bootloader --location=mbr --driveorder=sda
#####reboot

# The following is the partition information you requested
# Note that any partitions you deleted are not expressed
# here so unless you clear all partitions first, this is
# not guaranteed to work
#clearpart --drives=sda --all
part /boot --fstype ext3 --size=400
part biosboot --fstype=biosboot --size=1

#LVM install
#end_part

volgroup vg_sys pv.01 --pesize=4096
volgroup cindervolumes pv.02 --pesize=4096
volgroup vg_data pv.03 --pesize=4096
logvol swap  --fstype swap  --vgname=vg_data    --size=2000    --name=lv_swap
#lv_root

#lv_db 

#lv_glance_mount 

#lv_nova 

#vg_cinder

%packages  --ignoremissing
@Core
glibc.i686
nss-softokn-freebl.i686
%end

%pre
#!/bin/sh
echo "#partitioning schem e generated in %pre for 2 drives" > /tmp/part-include
echo "bootloader --location=mbr --driveorder=sda" >> /tmp/part-include
echo "clearpart --drives=sda --all" >> /tmp/part-include
%end

%post  --nochroot
#!/bin/bash

INSTALL_SRC_ROOT=/mnt/isodir
LOCAL_DISK_ROOT=/mnt/sysimage
OS_INSTALL_SRC=$INSTALL_SRC_ROOT/os_install
OS_INSTALL_DST=$LOCAL_DISK_ROOT/home/os_install
OS_ISO_SRC=$INSTALL_SRC_ROOT/os_iso
OS_ISO_MOUNT_SRC=$INSTALL_SRC_ROOT/os_mount_iso
OS_ISO_DST=$LOCAL_DISK_ROOT/home/os_iso

mkdir -p $OS_INSTALL_DST
mkdir -p $OS_ISO_DST
#¹ÒÔØÔ´Ä¿Â¼
NFS_SERVER_ADDRESS=192.170.0.1
[ ! -d $OS_INSTALL_SRC ] && { mkdir -p $OS_INSTALL_SRC; }
mount -o nolock $NFS_SERVER_ADDRESS:/home/install_share/macaddr $OS_INSTALL_SRC
[ ! -d $OS_ISO_SRC ] && { mkdir -p $OS_ISO_SRC; }
mount -o nolock $NFS_SERVER_ADDRESS:/linuxinstall/macaddr  $OS_ISO_SRC
mkdir -p $OS_ISO_MOUNT_SRC
mount -o loop -t iso9660 ${OS_ISO_SRC}/*.iso $OS_ISO_MOUNT_SRC

cp -f ${OS_INSTALL_SRC}/*.bin           ${OS_INSTALL_DST}/
cp -f ${OS_INSTALL_SRC}/os.json        ${OS_INSTALL_DST}/
cp -rf ${OS_INSTALL_SRC}/usrdata        ${OS_INSTALL_DST}/

#copy iso to $OS_ISO_DST
cp -rf ${OS_ISO_MOUNT_SRC}/*     ${OS_ISO_DST}/

umount $OS_INSTALL_SRC
umount $OS_ISO_MOUNT_SRC
umount $OS_ISO_SRC
%end

%post 
#!/bin/bash

#change network name and add vlan configuration
tmpline=`uuidgen`
tmpline=`echo $tmpline|tr -d '-'`  
echo "$tmpline"> /etc/hostname

grubconf="/etc/default/grub"
sed -i "/GRUB_CMDLINE_LINUX/{s/$/\" default_hugepagesz=1G hugepagesz=1G hugepages=pagevalue2\"/}" $grubconf

#lv_glance_nomount

#for support openstack
iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
sed -i "/reject-with icmp-host-prohibited/d" /etc/sysconfig/iptables
service iptables save
systemctl enable httpd.service
systemctl start httpd.service
vgrename cindervolumes cinder-volumes
#sriov
systemctl restart sriov.service
systemctl disable superpathd.service
systemctl disable iptables.service
systemctl disable ip6tables.service
systemctl disable multipathd.service

chmod +x  /etc/rc.d/rc.local
#config os
[ -e /usr/bin/opencosos-doctor.sh ] && { /usr/bin/opencosos-doctor.sh --auto; echo "os is cgslv5" >> /home/os_install/usrdata/pxe_install.log; }
if [ -e /usr/bin/doctor.sh ]; then
/usr/bin/doctor.sh --auto
dracut -f -o dm_multipath /boot/initramfs-$(uname -r).img;
dracut -f -o multipath /boot/initramfs-$(uname -r).img;
dracut -f -o dm_round_robin /boot/initramfs-$(uname -r).img
echo "os is TFG" >> /home/os_install/usrdata/pxe_install.log
fi

ssh-keygen -t rsa -P '' -f /root/.ssh/id_rsa 
chmod 600 /root/.ssh/authorized_keys
cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys

#create repos
REPO_ROUTE=/etc/yum.repos.d
REPO_FILE=${REPO_ROUTE}/OS_ISO.repo
[ ! -d ${REPO_ROUTE} ] && { mkdir -p ${REPO_ROUTE}; echo "create ${REPO_ROUTE}" >> /home/os_install/usrdata/pxe_install.log; }
rm -rf ${REPO_ROUTE}/*
touch ${REPO_FILE}
echo "[OS_ISO]" >${REPO_FILE}
echo "name=OS_ISO" >>${REPO_FILE}
echo "baseurl=file:/home/os_iso" >>${REPO_FILE}
echo "enabled=1" >>${REPO_FILE}
echo "gpgcheck=0" >>${REPO_FILE}

#install TFG bin
TFG_BIN=/home/os_install/ZXTFG*.bin
[ -e ${TFG_BIN} ] && { export HOME=/root; chmod +x ${TFG_BIN}; ${TFG_BIN} install reboot=n; echo "${TFG_BIN} install reboot=n" >> /home/os_install/usrdata/pxe_install.log; }

#nic fix
NIC_CFG=/home/os_install/usrdata/nic_net_cfg.sh
[ -e ${NIC_CFG} ] && { chmod +x ${NIC_CFG}; ${NIC_CFG}; echo "excute ${NIC_CFG}" >> /home/os_install/usrdata/pxe_install.log; }

sleep 30
%end
